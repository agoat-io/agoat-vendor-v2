{"version":3,"file":"static/js/391.38220bc9.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","components/PostsList.tsx","components/PostViewer.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","App.tsx"],"sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nexport { _objectWithoutProperties as default };","import React, { useState, useEffect, useCallback } from 'react'\nimport axios from 'axios'\nimport { marked } from 'marked'\nimport DOMPurify from 'dompurify'\n\ninterface Post {\n  id: string\n  title: string\n  content: string\n  slug: string\n  published: boolean\n  created_at: string\n  updated_at: string\n  user_id: string\n  author?: string\n}\n\ninterface PostsListProps {\n  apiUrl?: string\n  showPublishedOnly?: boolean\n  page?: number\n  limit?: number\n  isAuthenticated?: boolean\n  maxContentLength?: number\n  onPostClicked?: (post: Post) => void\n  onPostsLoaded?: (posts: Post[]) => void\n  onError?: (error: string) => void\n}\n\nconst PostsList: React.FC<PostsListProps> = ({\n  apiUrl = 'http://localhost:8080/api',\n  showPublishedOnly = true,\n  page = 1,\n  limit = 10,\n  isAuthenticated = false,\n  maxContentLength = 300,\n  onPostClicked,\n  onPostsLoaded,\n  onError\n}) => {\n  const [posts, setPosts] = useState<Post[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [currentPage, setCurrentPage] = useState(page)\n  const [totalPages, setTotalPages] = useState(1)\n  const [, setTotalPosts] = useState(0)\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString)\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  }\n\n  const getPreviewText = (content: string) => {\n    let text = content\n    \n    // For non-authenticated users, truncate content\n    if (!isAuthenticated && text.length > maxContentLength) {\n      text = text.substring(0, maxContentLength) + '...'\n    }\n    \n    // Convert markdown to HTML for preview\n    return DOMPurify.sanitize(marked.parse(text) as string)\n  }\n\n  const fetchPosts = useCallback(async () => {\n    console.log('PostsList: Fetching posts with params:', {\n      apiUrl,\n      page: currentPage,\n      limit,\n      showPublishedOnly: showPublishedOnly || !isAuthenticated\n    })\n    \n    setLoading(true)\n    setError(null)\n    \n    try {\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: limit.toString()\n      })\n      \n      if (showPublishedOnly || !isAuthenticated) {\n        params.append('published', 'true')\n      }\n      \n      const url = `${apiUrl}/posts?${params}`\n      console.log('PostsList: Making request to:', url)\n      const response = await axios.get(url)\n      \n      if (response.data && response.data.data) {\n        setPosts(response.data.data)\n        setTotalPosts(response.data.meta?.total || response.data.data.length)\n        setTotalPages(response.data.meta?.total_pages || Math.ceil(response.data.data.length / limit))\n        \n        console.log('PostsList: Loaded posts:', response.data.data.length)\n        onPostsLoaded?.(response.data.data)\n      } else {\n        setPosts([])\n      }\n    } catch (err: any) {\n      const errorMessage = err.response?.data?.message || err.message || 'Failed to load posts'\n      setError(errorMessage)\n      onError?.(errorMessage)\n    } finally {\n      setLoading(false)\n    }\n  }, [apiUrl, currentPage, limit, showPublishedOnly, isAuthenticated, onPostsLoaded, onError])\n\n  const changePage = (newPage: number) => {\n    if (newPage >= 1 && newPage <= totalPages) {\n      setCurrentPage(newPage)\n    }\n  }\n\n  const handlePostClick = (post: Post) => {\n    // Create URL with query string parameter\n    const postPath = `${post.slug}/${post.id}`\n    const currentUrl = new URL(window.location.href)\n    currentUrl.searchParams.set('post-path', postPath)\n    \n    // Update URL without page reload\n    window.history.pushState({}, '', currentUrl.toString())\n    \n    // Emit the post click event\n    onPostClicked?.(post)\n  }\n\n  useEffect(() => {\n    fetchPosts()\n  }, [fetchPosts])\n\n  useEffect(() => {\n    setCurrentPage(page)\n  }, [page])\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-3 text-gray-600\">Loading posts...</span>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm text-red-800\">{error}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (posts.length === 0) {\n    return (\n      <div className=\"text-center py-8 sm:py-12\">\n        <svg className=\"mx-auto h-10 w-10 sm:h-12 sm:w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n        </svg>\n        <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No posts found</h3>\n        <p className=\"mt-1 text-xs sm:text-sm text-gray-500\">There are no posts available at the moment.</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"viewer-container\">\n      {/* Posts list with SEO optimization */}\n      <div className=\"posts-list\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Latest Posts</h1>\n          <p className=\"text-sm sm:text-base text-gray-600\">Discover our latest articles and insights</p>\n        </div>\n\n        <div className=\"grid gap-4 sm:gap-6 lg:gap-8\">\n          {posts.map(post => (\n            <article \n              key={post.id}\n              className=\"post-card bg-white border border-gray-200 rounded-lg p-4 sm:p-6 hover:shadow-md transition-shadow\"\n              itemScope\n              itemType=\"https://schema.org/BlogPosting\"\n            >\n              <div className=\"mb-3 sm:mb-4\">\n                <h2 className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900 mb-2 leading-tight\" itemProp=\"headline\">\n                  <button \n                    onClick={() => handlePostClick(post)}\n                    className=\"hover:text-blue-600 transition-colors text-left w-full\"\n                  >\n                    {post.title}\n                  </button>\n                </h2>\n                <div className=\"flex flex-col sm:flex-row sm:items-center text-xs sm:text-sm text-gray-500 space-y-1 sm:space-y-0 sm:space-x-4\">\n                  <span itemProp=\"author\">By {post.author || 'Admin'}</span>\n                  <time dateTime={post.created_at} itemProp=\"datePublished\">Published {formatDate(post.created_at)}</time>\n                  {post.updated_at && post.updated_at !== post.created_at && (\n                    <time dateTime={post.updated_at} itemProp=\"dateModified\" className=\"hidden sm:inline\">\n                      • Updated {formatDate(post.updated_at)}\n                    </time>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"post-preview mb-3 sm:mb-4\" itemProp=\"description\">\n                <div \n                  className=\"text-sm sm:text-base text-gray-700 leading-relaxed\" \n                  dangerouslySetInnerHTML={{ __html: getPreviewText(post.content) }}\n                />\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-2 sm:space-y-0\">\n                <button \n                  onClick={() => handlePostClick(post)}\n                  className=\"text-blue-600 hover:text-blue-800 font-medium text-sm sm:text-base text-left\"\n                >\n                  {isAuthenticated ? 'Read full article' : 'Read more'}\n                </button>\n                \n                {!isAuthenticated && post.content.length > maxContentLength && (\n                  <div className=\"text-xs sm:text-sm text-gray-500\">\n                    {Math.ceil(post.content.length / 100)} min read\n                  </div>\n                )}\n              </div>\n            </article>\n          ))}\n        </div>\n\n        {/* Pagination with SEO-friendly URLs */}\n        {totalPages > 1 && (\n          <div className=\"mt-6 sm:mt-8 flex justify-center\">\n            <nav className=\"flex items-center space-x-1 sm:space-x-2\" role=\"navigation\" aria-label=\"Pagination\">\n              {currentPage > 1 && (\n                <a \n                  href={`?page=${currentPage - 1}`}\n                  onClick={(e) => {\n                    e.preventDefault()\n                    changePage(currentPage - 1)\n                  }}\n                  className=\"px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n                  rel=\"prev\"\n                >\n                  Previous\n                </a>\n              )}\n              \n              <span className=\"px-2 sm:px-3 py-2 text-xs sm:text-sm text-gray-700\">\n                Page {currentPage} of {totalPages}\n              </span>\n              \n              {currentPage < totalPages && (\n                <a \n                  href={`?page=${currentPage + 1}`}\n                  onClick={(e) => {\n                    e.preventDefault()\n                    changePage(currentPage + 1)\n                  }}\n                  className=\"px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n                  rel=\"next\"\n                >\n                  Next\n                </a>\n              )}\n            </nav>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default PostsList\n\n","import React, { useState, useEffect, useCallback } from 'react'\nimport axios from 'axios'\nimport { marked } from 'marked'\nimport DOMPurify from 'dompurify'\n\ninterface Post {\n  id: string\n  title: string\n  content: string\n  slug: string\n  published: boolean\n  created_at: string\n  updated_at: string\n  user_id: string\n  author?: string\n}\n\ninterface PostViewerProps {\n  postId?: string\n  postSlug?: string\n  apiUrl?: string\n  showLoginPrompt?: boolean\n  maxContentLength?: number\n  isAuthenticated?: boolean\n  onLoginRequested?: () => void\n  onPostLoaded?: (post: Post) => void\n  onError?: (error: string) => void\n}\n\nconst PostViewer: React.FC<PostViewerProps> = ({\n  postId,\n  postSlug,\n  apiUrl = 'http://localhost:8080/api',\n  showLoginPrompt = true,\n  maxContentLength = 800,\n  isAuthenticated = false,\n  onLoginRequested,\n  onPostLoaded,\n  onError\n}) => {\n  const [post, setPost] = useState<Post | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString)\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  }\n\n  const getRenderedContent = () => {\n    if (!post) return ''\n    \n    let content = post.content\n    \n    // Truncate content for non-authenticated users\n    if (!isAuthenticated && content.length > maxContentLength) {\n      content = content.substring(0, maxContentLength) + '...'\n    }\n    \n    // Convert markdown to HTML\n    return DOMPurify.sanitize(marked.parse(content) as string)\n  }\n\n  const shouldShowLoginPrompt = () => {\n    return showLoginPrompt && \n           !isAuthenticated && \n           post && \n           post.content.length > maxContentLength\n  }\n\n  const fetchPost = useCallback(async () => {\n    setLoading(true)\n    setError(null)\n    \n    try {\n      let url = `${apiUrl}/posts`\n      \n      if (postId) {\n        url += `/${postId}`\n      } else if (postSlug) {\n        url += `/slug/${postSlug}`\n      } else {\n        throw new Error('Either postId or postSlug must be provided')\n      }\n      \n      const response = await axios.get(url)\n      \n      if (response.data && response.data.data) {\n        const postData = response.data.data\n        setPost(postData)\n        \n        // Clean copy for emission\n        const cleanPost: Post = {\n          id: postData.id,\n          title: postData.title,\n          content: postData.content,\n          slug: postData.slug,\n          published: postData.published,\n          created_at: postData.created_at,\n          updated_at: postData.updated_at,\n          user_id: postData.user_id || '',\n          author: postData.author\n        }\n        \n        onPostLoaded?.(cleanPost)\n      } else {\n        throw new Error('Post not found')\n      }\n    } catch (err: any) {\n      const errorMessage = err.response?.data?.message || err.message || 'Failed to load post'\n      setError(errorMessage)\n      onError?.(errorMessage)\n    } finally {\n      setLoading(false)\n    }\n  }, [postId, postSlug, apiUrl, onPostLoaded, onError])\n\n  useEffect(() => {\n    if (postId || postSlug) {\n      fetchPost()\n    }\n  }, [fetchPost, postId, postSlug])\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-3 text-gray-600\">Loading post...</span>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm text-red-800\">{error}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!post) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-gray-500\">Post not found</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"viewer-container\">\n      <article \n        className=\"prose prose-sm sm:prose-base lg:prose-lg max-w-none\"\n        itemScope\n        itemType=\"https://schema.org/BlogPosting\"\n      >\n        <header className=\"mb-6 sm:mb-8\">\n          <h1 \n            className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-3 sm:mb-4 leading-tight\"\n            itemProp=\"headline\"\n          >\n            {post.title}\n          </h1>\n          <div className=\"flex flex-col sm:flex-row sm:items-center text-xs sm:text-sm text-gray-500 space-y-1 sm:space-y-0 sm:space-x-4\">\n            <span itemProp=\"author\">By {post.author || 'Admin'}</span>\n            <span className=\"hidden sm:inline\">•</span>\n            <time dateTime={post.created_at} itemProp=\"datePublished\">{formatDate(post.created_at)}</time>\n            {post.updated_at && post.updated_at !== post.created_at && (\n              <time dateTime={post.updated_at} itemProp=\"dateModified\" className=\"hidden sm:inline\">\n                • Updated {formatDate(post.updated_at)}\n              </time>\n            )}\n          </div>\n        </header>\n        \n        <div \n          className=\"prose prose-lg max-w-none\"\n          itemProp=\"articleBody\"\n          dangerouslySetInnerHTML={{ __html: getRenderedContent() }}\n        />\n        \n        {/* Login prompt for non-authenticated users */}\n        {shouldShowLoginPrompt() && (\n          <div className=\"mt-6 sm:mt-8 p-4 sm:p-6 bg-gray-50 rounded-lg border\">\n            <h3 className=\"text-base sm:text-lg font-medium text-gray-900 mb-2\">Want to read more?</h3>\n            <p className=\"text-sm sm:text-base text-gray-600 mb-4\">Sign in to access the full article and discover more great content.</p>\n            <button\n              onClick={onLoginRequested}\n              className=\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 w-full sm:w-auto\"\n            >\n              Sign In\n            </button>\n          </div>\n        )}\n      </article>\n    </div>\n  )\n}\n\nexport default PostViewer\n\n","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };","import React, { useState, useEffect } from 'react'\nimport PostViewer from './components/PostViewer'\nimport PostsList from './components/PostsList'\n\ninterface AppProps {\n  mode?: 'single' | 'list'\n  postId?: string\n  postSlug?: string\n  apiUrl?: string\n  showLoginPrompt?: boolean\n  maxContentLength?: number\n  isAuthenticated?: boolean\n  showPublishedOnly?: boolean\n  page?: number\n  limit?: number\n}\n\nconst App: React.FC<AppProps> = (props) => {\n  const [viewMode, setViewMode] = useState<'single' | 'list' | null>(null)\n  const [postId, setPostId] = useState<string | undefined>()\n  const [postSlug, setPostSlug] = useState<string | undefined>()\n  const [apiUrl, setApiUrl] = useState('http://localhost:8080/api')\n  const [showLoginPrompt, setShowLoginPrompt] = useState(true)\n  const [maxContentLength, setMaxContentLength] = useState(800)\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [showPublishedOnly, setShowPublishedOnly] = useState(true)\n  const [page, setPage] = useState(1)\n  const [limit, setLimit] = useState(10)\n\n  // Event handlers\n  const handleLoginRequested = () => {\n    console.log('Login requested')\n    window.parent?.postMessage({ type: 'login-requested' }, '*')\n  }\n\n  const handlePostLoaded = (post: any) => {\n    console.log('Post loaded:', post)\n    window.parent?.postMessage({ type: 'post-loaded', post }, '*')\n  }\n\n  const handlePostsLoaded = (posts: any[]) => {\n    console.log('Posts loaded:', posts)\n    window.parent?.postMessage({ type: 'posts-loaded', posts }, '*')\n  }\n\n  const handlePostClicked = (post: any) => {\n    console.log('Post clicked:', post)\n    window.parent?.postMessage({ type: 'post-clicked', post }, '*')\n  }\n\n  const handleError = (error: string) => {\n    console.error('Error:', error)\n    window.parent?.postMessage({ type: 'error', error }, '*')\n  }\n\n  // Parse URL parameters\n  const parseUrlParams = () => {\n    const urlParams = new URLSearchParams(window.location.search)\n    \n    console.log('Viewer: Raw URL params:', window.location.search)\n    console.log('Viewer: All URL params:', Object.fromEntries(urlParams.entries()))\n    \n    setViewMode((urlParams.get('mode') as 'single' | 'list') || null)\n    setPostId(urlParams.get('postId') || undefined)\n    setPostSlug(urlParams.get('postSlug') || undefined)\n    setApiUrl(urlParams.get('apiUrl') || 'http://localhost:8080/api')\n    setShowLoginPrompt(urlParams.get('showLoginPrompt') !== 'false')\n    setMaxContentLength(parseInt(urlParams.get('maxContentLength') || '800'))\n    setIsAuthenticated(urlParams.get('isAuthenticated') === 'true')\n    setShowPublishedOnly(urlParams.get('showPublishedOnly') !== 'false')\n    setPage(parseInt(urlParams.get('page') || '1'))\n    setLimit(parseInt(urlParams.get('limit') || '10'))\n  }\n\n  // Listen for messages from parent\n  const handleMessage = (event: MessageEvent) => {\n    if (event.data && typeof event.data === 'object') {\n      const { type, ...data } = event.data\n      \n      switch (type) {\n        case 'set-config':\n          Object.assign({\n            setApiUrl,\n            setShowLoginPrompt,\n            setMaxContentLength,\n            setIsAuthenticated,\n            setShowPublishedOnly,\n            setPage,\n            setLimit\n          }, data)\n          break\n        case 'set-post-id':\n          setPostId(data.postId)\n          setViewMode('single')\n          break\n        case 'set-post-slug':\n          setPostSlug(data.postSlug)\n          setViewMode('single')\n          break\n        case 'set-view-mode':\n          setViewMode(data.mode)\n          break\n      }\n    }\n  }\n\n  useEffect(() => {\n    console.log('Viewer App: Mounted, parsing URL params...')\n    parseUrlParams()\n    window.addEventListener('message', handleMessage)\n    \n    // Debug: Check if we're in an iframe\n    console.log('Viewer App: In iframe?', window !== window.parent)\n    console.log('Viewer App: Current URL:', window.location.href)\n\n    return () => {\n      window.removeEventListener('message', handleMessage)\n    }\n  }, [])\n\n  // Override with props if provided (for direct usage)\n  const effectiveProps = {\n    viewMode: props.mode || viewMode,\n    postId: props.postId || postId,\n    postSlug: props.postSlug || postSlug,\n    apiUrl: props.apiUrl || apiUrl,\n    showLoginPrompt: props.showLoginPrompt ?? showLoginPrompt,\n    maxContentLength: props.maxContentLength || maxContentLength,\n    isAuthenticated: props.isAuthenticated ?? isAuthenticated,\n    showPublishedOnly: props.showPublishedOnly ?? showPublishedOnly,\n    page: props.page || page,\n    limit: props.limit || limit\n  }\n\n  return (\n    <div id=\"app\">\n      {/* Single post viewer */}\n      {effectiveProps.viewMode === 'single' && (\n        <PostViewer\n          postId={effectiveProps.postId}\n          postSlug={effectiveProps.postSlug}\n          apiUrl={effectiveProps.apiUrl}\n          showLoginPrompt={effectiveProps.showLoginPrompt}\n          maxContentLength={effectiveProps.maxContentLength}\n          isAuthenticated={effectiveProps.isAuthenticated}\n          onLoginRequested={handleLoginRequested}\n          onPostLoaded={handlePostLoaded}\n          onError={handleError}\n        />\n      )}\n\n      {/* Posts list viewer */}\n      {effectiveProps.viewMode === 'list' && (\n        <PostsList\n          apiUrl={effectiveProps.apiUrl}\n          showPublishedOnly={effectiveProps.showPublishedOnly}\n          page={effectiveProps.page}\n          limit={effectiveProps.limit}\n          isAuthenticated={effectiveProps.isAuthenticated}\n          maxContentLength={effectiveProps.maxContentLength}\n          onPostClicked={handlePostClicked}\n          onPostsLoaded={handlePostsLoaded}\n          onError={handleError}\n        />\n      )}\n\n      {/* Default view */}\n      {!effectiveProps.viewMode && (\n        <div className=\"viewer-container\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">AGoat Publisher Viewer</h1>\n            <p className=\"text-gray-600 mb-6\">\n              This is a React microfrontend component for displaying blog posts.\n            </p>\n            <div className=\"bg-gray-50 p-6 rounded-lg\">\n              <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Usage Examples:</h2>\n              <div className=\"text-left space-y-2 text-sm text-gray-700\">\n                <p><strong>Single Post:</strong> ?mode=single&postId=123</p>\n                <p><strong>Single Post by Slug:</strong> ?mode=single&postSlug=my-post-title</p>\n                <p><strong>Posts List:</strong> ?mode=list&page=1&limit=10</p>\n                <p><strong>Custom API:</strong> &apiUrl=https://api.example.com</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n"],"names":["_objectWithoutProperties","e","t","o","r","i","Object","getOwnPropertySymbols","n","length","indexOf","propertyIsEnumerable","call","_ref","apiUrl","showPublishedOnly","page","limit","isAuthenticated","maxContentLength","onPostClicked","onPostsLoaded","onError","posts","setPosts","useState","loading","setLoading","error","setError","currentPage","setCurrentPage","totalPages","setTotalPages","setTotalPosts","formatDate","dateString","Date","toLocaleDateString","year","month","day","getPreviewText","content","text","substring","DOMPurify","sanitize","marked","parse","fetchPosts","useCallback","async","console","log","params","URLSearchParams","toString","append","url","concat","response","axios","_response$data$meta","_response$data$meta2","data","meta","total","total_pages","Math","ceil","err","_err$response","_err$response$data","errorMessage","message","changePage","newPage","handlePostClick","post","postPath","slug","id","currentUrl","URL","window","location","href","searchParams","set","history","pushState","useEffect","_jsxs","className","children","_jsx","viewBox","fill","fillRule","d","clipRule","stroke","strokeLinecap","strokeLinejoin","strokeWidth","map","itemScope","itemType","itemProp","onClick","title","author","dateTime","created_at","updated_at","dangerouslySetInnerHTML","__html","role","preventDefault","rel","postId","postSlug","showLoginPrompt","onLoginRequested","onPostLoaded","setPost","fetchPost","Error","postData","cleanPost","published","user_id","getRenderedContent","_objectWithoutPropertiesLoose","hasOwnProperty","props","_props$showLoginPromp","_props$isAuthenticate","_props$showPublishedO","viewMode","setViewMode","setPostId","setPostSlug","setApiUrl","setShowLoginPrompt","setMaxContentLength","setIsAuthenticated","setShowPublishedOnly","setPage","setLimit","handleError","_window$parent5","parent","postMessage","type","handleMessage","event","_event$data","_excluded","assign","mode","parseUrlParams","urlParams","search","fromEntries","entries","get","undefined","parseInt","addEventListener","removeEventListener","effectiveProps","PostViewer","handleLoginRequested","_window$parent","_window$parent2","PostsList","_window$parent4","_window$parent3"],"sourceRoot":""}