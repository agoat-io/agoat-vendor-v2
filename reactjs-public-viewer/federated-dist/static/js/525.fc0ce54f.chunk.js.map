{"version":3,"file":"static/js/525.fc0ce54f.chunk.js","mappings":"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","sources":["components/PostViewer.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport axios from 'axios'\nimport { marked } from 'marked'\nimport DOMPurify from 'dompurify'\n\ninterface Post {\n  id: string\n  title: string\n  content: string\n  slug: string\n  published: boolean\n  created_at: string\n  updated_at: string\n  user_id: string\n  author?: string\n}\n\ninterface PostViewerProps {\n  postId?: string\n  postSlug?: string\n  apiUrl?: string\n  showLoginPrompt?: boolean\n  maxContentLength?: number\n  isAuthenticated?: boolean\n  onLoginRequested?: () => void\n  onPostLoaded?: (post: Post) => void\n  onError?: (error: string) => void\n}\n\nconst PostViewer: React.FC<PostViewerProps> = ({\n  postId,\n  postSlug,\n  apiUrl = 'http://localhost:8080/api',\n  showLoginPrompt = true,\n  maxContentLength = 800,\n  isAuthenticated = false,\n  onLoginRequested,\n  onPostLoaded,\n  onError\n}) => {\n  const [post, setPost] = useState<Post | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString)\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  }\n\n  const getRenderedContent = () => {\n    if (!post) return ''\n    \n    let content = post.content\n    \n    // Truncate content for non-authenticated users\n    if (!isAuthenticated && content.length > maxContentLength) {\n      content = content.substring(0, maxContentLength) + '...'\n    }\n    \n    // Convert markdown to HTML\n    return DOMPurify.sanitize(marked.parse(content) as string)\n  }\n\n  const shouldShowLoginPrompt = () => {\n    return showLoginPrompt && \n           !isAuthenticated && \n           post && \n           post.content.length > maxContentLength\n  }\n\n  const fetchPost = useCallback(async () => {\n    setLoading(true)\n    setError(null)\n    \n    try {\n      let url = `${apiUrl}/posts`\n      \n      if (postId) {\n        url += `/${postId}`\n      } else if (postSlug) {\n        url += `/slug/${postSlug}`\n      } else {\n        throw new Error('Either postId or postSlug must be provided')\n      }\n      \n      const response = await axios.get(url)\n      \n      if (response.data && response.data.data) {\n        const postData = response.data.data\n        setPost(postData)\n        \n        // Clean copy for emission\n        const cleanPost: Post = {\n          id: postData.id,\n          title: postData.title,\n          content: postData.content,\n          slug: postData.slug,\n          published: postData.published,\n          created_at: postData.created_at,\n          updated_at: postData.updated_at,\n          user_id: postData.user_id || '',\n          author: postData.author\n        }\n        \n        onPostLoaded?.(cleanPost)\n      } else {\n        throw new Error('Post not found')\n      }\n    } catch (err: any) {\n      const errorMessage = err.response?.data?.message || err.message || 'Failed to load post'\n      setError(errorMessage)\n      onError?.(errorMessage)\n    } finally {\n      setLoading(false)\n    }\n  }, [postId, postSlug, apiUrl, onPostLoaded, onError])\n\n  useEffect(() => {\n    if (postId || postSlug) {\n      fetchPost()\n    }\n  }, [fetchPost, postId, postSlug])\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-3 text-gray-600\">Loading post...</span>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm text-red-800\">{error}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!post) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-gray-500\">Post not found</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"viewer-container\">\n      <article \n        className=\"prose prose-sm sm:prose-base lg:prose-lg max-w-none\"\n        itemScope\n        itemType=\"https://schema.org/BlogPosting\"\n      >\n        <header className=\"mb-6 sm:mb-8\">\n          <h1 \n            className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-3 sm:mb-4 leading-tight\"\n            itemProp=\"headline\"\n          >\n            {post.title}\n          </h1>\n          <div className=\"flex flex-col sm:flex-row sm:items-center text-xs sm:text-sm text-gray-500 space-y-1 sm:space-y-0 sm:space-x-4\">\n            <span itemProp=\"author\">By {post.author || 'Admin'}</span>\n            <span className=\"hidden sm:inline\">•</span>\n            <time dateTime={post.created_at} itemProp=\"datePublished\">{formatDate(post.created_at)}</time>\n            {post.updated_at && post.updated_at !== post.created_at && (\n              <time dateTime={post.updated_at} itemProp=\"dateModified\" className=\"hidden sm:inline\">\n                • Updated {formatDate(post.updated_at)}\n              </time>\n            )}\n          </div>\n        </header>\n        \n        <div \n          className=\"prose prose-lg max-w-none\"\n          itemProp=\"articleBody\"\n          dangerouslySetInnerHTML={{ __html: getRenderedContent() }}\n        />\n        \n        {/* Login prompt for non-authenticated users */}\n        {shouldShowLoginPrompt() && (\n          <div className=\"mt-6 sm:mt-8 p-4 sm:p-6 bg-gray-50 rounded-lg border\">\n            <h3 className=\"text-base sm:text-lg font-medium text-gray-900 mb-2\">Want to read more?</h3>\n            <p className=\"text-sm sm:text-base text-gray-600 mb-4\">Sign in to access the full article and discover more great content.</p>\n            <button\n              onClick={onLoginRequested}\n              className=\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 w-full sm:w-auto\"\n            >\n              Sign In\n            </button>\n          </div>\n        )}\n      </article>\n    </div>\n  )\n}\n\nexport default PostViewer\n\n"],"names":["_ref","postId","postSlug","apiUrl","showLoginPrompt","maxContentLength","isAuthenticated","onLoginRequested","onPostLoaded","onError","post","setPost","useState","loading","setLoading","error","setError","formatDate","dateString","Date","toLocaleDateString","year","month","day","fetchPost","useCallback","async","url","concat","Error","response","axios","data","postData","cleanPost","id","title","content","slug","published","created_at","updated_at","user_id","author","err","_err$response","_err$response$data","errorMessage","message","useEffect","_jsxs","className","children","_jsx","viewBox","fill","fillRule","d","clipRule","itemScope","itemType","itemProp","dateTime","dangerouslySetInnerHTML","__html","getRenderedContent","length","substring","DOMPurify","sanitize","marked","parse","onClick"],"sourceRoot":""}